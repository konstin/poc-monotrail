name: Test

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  test:
    name: Test
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest ] #, windows-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      # Make this the active python
      - name: Install python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"
      - name: Install virtualenv, maturin pytest
        run: |
          pip install -U pip virtualenv maturin pytest jupyter nbconvert
          virtualenv --upgrade-embed-wheels
      - name: Install stable rust
        uses: actions-rs/toolchain@v1
        id: rustup
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Install poetry
        run: curl -sSL https://install.python-poetry.org | python3 -
      - name: Add poetry to path
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      # Caching
      # Install gnu-tar because BSD tar is buggy
      # https://github.com/actions/cache/issues/403
      - name: Install GNU tar (Macos)
        if: matrix.os == 'macos-latest'
        run: |
          brew install gnu-tar
          echo "/usr/local/opt/gnu-tar/libexec/gnubin" >> $GITHUB_PATH
      - name: Cache cargo build
        uses: Swatinem/rust-cache@v1
        with:
          key: monotrail-cargo-${{ runner.os }}

      - name: cargo build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release

      - name: Download popular wheels
        run: pip download -d popular-wheels -r popular.txt

      - name: cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --release

      - name: pytest
        run: pytest

      - name: Install hyperfine (linux)
        if: matrix.os == 'ubuntu-latest-skip-for-slowness'
        run: |
          mkdir -p $HOME/.local/bin
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          hyperfine_version="v1.12.0"
          hyperfine_url="https://github.com/sharkdp/hyperfine/releases/download/$hyperfine_version/hyperfine-$hyperfine_version-x86_64-unknown-linux-musl.tar.gz"
          curl -L $hyperfine_url | tar -zxv --strip-components 1 -C $HOME/.local/bin hyperfine-$hyperfine_version-x86_64-unknown-linux-musl/hyperfine
      - name: Install hyperfine (mac)
        if: matrix.os == 'macos-latest-skip-for-slowness'
        run: brew install hyperfine
      - name: Benchmark plotly and tqdm
        #if: matrix.os == 'ubuntu-latest'
        if: matrix.os == 'skip-for-slowness'
        run: |
          virtualenv .venv-benchmark
          
          VIRTUAL_ENV=.venv-benchmark hyperfine -r 5 -p ".venv-benchmark/bin/pip uninstall -y plotly" \
            "target/release/monotrail install popular-wheels/plotly-5.5.0-py2.py3-none-any.whl" \
            ".venv-benchmark/bin/pip install --no-deps popular-wheels/plotly-5.5.0-py2.py3-none-any.whl"
          
          VIRTUAL_ENV=.venv-benchmark hyperfine -p ".venv-benchmark/bin/pip uninstall -y tqdm" \
            "target/release/monotrail install popular-wheels/tqdm-4.62.3-py2.py3-none-any.whl" \
            ".venv-benchmark/bin/pip install --no-deps popular-wheels/tqdm-4.62.3-py2.py3-none-any.whl"

          #VIRTUAL_ENV=.venv-benchmark hyperfine -r 5 -p ".venv-benchmark/bin/pip uninstall -y plotly" \
          #  "target/release/monotrail install --no-compile wheels/plotly-5.5.0-py2.py3-none-any.whl" \
          #  ".venv-benchmark/bin/pip install --no-compile --no-deps wheels/plotly-5.5.0-py2.py3-none-any.whl"
          
          rm -r .venv-benchmark
